package xogaming;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Dream10
 */
public class PlayingWithComputerBeforeDesign extends javax.swing.JFrame {

    /**
     * Creates new form PlayingGames
     */
    public PlayingWithComputerBeforeDesign() {
        initComponents();
        centreWindow(this);
        this.setTitle("XO Game");
        arrayListCount();
        
    }
    //declare the variables of the players and also determine whose turn it is.
private String playersturn = "X";
private String X = "PLAYER X";
private String O = "PLAYER O";
Random randomX = new Random();
int upperNumber = 10;
int randomNumber;
ArrayList<Integer> buttonList = new ArrayList();
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        Button1 = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        Button7 = new javax.swing.JButton();
        Button8 = new javax.swing.JButton();
        Button9 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ResetButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        PlayerNameText = new javax.swing.JTextField();
        RecordingButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(3, 3, 3, 3));

        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });
        jPanel1.add(Button1);

        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });
        jPanel1.add(Button2);

        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });
        jPanel1.add(Button3);

        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });
        jPanel1.add(Button4);

        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });
        jPanel1.add(Button5);

        Button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button6ActionPerformed(evt);
            }
        });
        jPanel1.add(Button6);

        Button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button7ActionPerformed(evt);
            }
        });
        jPanel1.add(Button7);

        Button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button8ActionPerformed(evt);
            }
        });
        jPanel1.add(Button8);

        Button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button9ActionPerformed(evt);
            }
        });
        jPanel1.add(Button9);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Your Name");

        ResetButton.setBackground(new java.awt.Color(255, 102, 204));
        ResetButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ResetButton.setForeground(new java.awt.Color(255, 255, 255));
        ResetButton.setText("Reset ");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        ExitButton.setBackground(new java.awt.Color(102, 153, 255));
        ExitButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        PlayerNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerNameTextActionPerformed(evt);
            }
        });

        RecordingButton.setText("Record?");
        RecordingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecordingButtonActionPerformed(evt);
            }
        });

        jButton1.setText("View Records");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RecordingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlayerNameText))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 83, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ResetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ExitButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(161, 161, 161))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlayerNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ResetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ExitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RecordingButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        // TODO add your handling code here:
        //reset the game 
        showAllButtons();
        arrayListCount();
        resetgame();
        getRandomFromList();
        
        //resetgame();
        // showAllButtons();

    }//GEN-LAST:event_ResetButtonActionPerformed
       public static String playerName;
       ArrayList<Integer> arrayButtonNumberRecording = new ArrayList<>();
       ArrayList<String> arrayButtonXorORecording = new ArrayList<>();
       int record = 0 ; 
    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Button 1 ");
        buttonList.remove(new Integer(1));
        System.out.println("Array Button 1 "+ buttonList);
        jbutton1 = playersturn;
        // Button1.setText(playersturn);
        addIconToButton(1);
        recordSteps(1);
        playersturn();
        System.out.println("Button 1 Next Turn " +playersturn);
        
        
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner();
        Button1.setEnabled(false);
     //   checkRandomStatus(randomNumber);
        
        
    }//GEN-LAST:event_Button1ActionPerformed

    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
         System.out.println("Button 2 ");
        buttonList.remove(new Integer(2));
        System.out.println("Array Button 2 "+ buttonList);
        Button2.setText(playersturn);
        recordSteps(2);
        playersturn();
        System.out.println("Button 2 Next Turn " +playersturn);
        
        
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button2.setEnabled(false);
    }//GEN-LAST:event_Button2ActionPerformed

    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
          System.out.println("Button 3 ");
        buttonList.remove(new Integer(3));
        System.out.println("Array Button 3 "+ buttonList);
        Button3.setText(playersturn);
        recordSteps(3);
        playersturn();
        System.out.println("Button 1 Next Turn " +playersturn);
        
        
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button3.setEnabled(false);
    }//GEN-LAST:event_Button3ActionPerformed

    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        System.out.println("Button 4 ");
        buttonList.remove(new Integer(4));
        System.out.println("Array Button 4 "+ buttonList);
        Button4.setText(playersturn);
        recordSteps(4);
        playersturn();
        System.out.println("Button 4 Next Turn " +playersturn);
        
        
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button4.setEnabled(false);
    }//GEN-LAST:event_Button4ActionPerformed

    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        // TODO add your handling code here:
        System.out.println("Button 5 ");
        buttonList.remove(new Integer(5));
        System.out.println("Array Button 5 "+ buttonList);
        Button5.setText(playersturn);
        recordSteps(5);
        playersturn();
        System.out.println("Button 5 Next Turn " +playersturn);
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button5.setEnabled(false);
    }//GEN-LAST:event_Button5ActionPerformed

    private void Button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button6ActionPerformed
System.out.println("Button 6 ");
        buttonList.remove(new Integer(6));
        System.out.println("Array Button 6 "+ buttonList);
        Button6.setText(playersturn);
        recordSteps(6);
        playersturn();
        System.out.println("Button 6 Next Turn " +playersturn);
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        winner(); 
        Button6.setEnabled(false);
    }//GEN-LAST:event_Button6ActionPerformed

    private void Button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button7ActionPerformed
        System.out.println("Button 7 ");
        buttonList.remove(new Integer(7));
        System.out.println("Array Button 7 "+ buttonList);
        Button7.setText(playersturn);
        recordSteps(7);
        playersturn();
        System.out.println("Button 7 Next Turn " +playersturn);
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button7.setEnabled(false);
    }//GEN-LAST:event_Button7ActionPerformed

    private void Button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button8ActionPerformed
        System.out.println("Button 8 ");
        buttonList.remove(new Integer(8));
        System.out.println("Array Button 8 "+ buttonList);
        Button8.setText(playersturn);
        recordSteps(8);
        playersturn();
        System.out.println("Button 8 Next Turn " +playersturn);
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button8.setEnabled(false);
    }//GEN-LAST:event_Button8ActionPerformed

    private void Button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button9ActionPerformed
        System.out.println("Button 9 ");
        buttonList.remove(new Integer(9));
        System.out.println("Array Button 9 "+ buttonList);
        Button9.setText(playersturn);
        recordSteps(9);
        playersturn();
        System.out.println("Button 9 Next Turn " +playersturn);
        
      //  randomNumber = randomX.nextInt(buttonList) ; 
        getRandomFromList();
        checkButtonStatus(randomNumber);
        
        
        
        winner(); 
        Button9.setEnabled(false);
    }//GEN-LAST:event_Button9ActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
       System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void PlayerNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlayerNameTextActionPerformed

    private void RecordingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecordingButtonActionPerformed
        // TODO add your handling code here:
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "Do you want record?", "Recording Message", dialogButton);
        if(dialogResult == 0) {
        System.out.println("Yes");
        record = 1 ;
        } else {
        System.out.println("No");
        record = 0;
        } 
    }//GEN-LAST:event_RecordingButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Array Size : " + arrayButtonNumberRecording.size());
      
        for( int r =0; r < arrayButtonNumberRecording.size() ; r++){
            System.out.println("Step Number " + (r+1) +
                    " : Button Number " + arrayButtonNumberRecording.get(r) + 
                    " With Sign " + arrayButtonXorORecording.get(r) );
        }
        
        saveRecordingFile();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    private void resetgame()
{
       Button1.setText("");
       Button2.setText("");
       Button3.setText("");
       Button4.setText("");
       Button5.setText("");
       Button6.setText("");
       Button7.setText("");
       Button8.setText("");
       Button9.setText("");
    
}
    private void playerXwins()
{
        try {
            Thread.sleep(2000);
            winJFrame wjf=new winJFrame();
            wjf.show();
         //   dispose();
           // resetgame();
        } catch (InterruptedException ex) {
            Logger.getLogger(PlayingWithComputerBeforeDesign.class.getName()).log(Level.SEVERE, null, ex);
        }
} 
  private void playerOwins()
{
        try {
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(PlayingWithComputerBeforeDesign.class.getName()).log(Level.SEVERE, null, ex);
        }
      winJFrame wjf=new winJFrame();
      wjf.show();
      dispose();
     // resetgame();
} 
  private void playersturn()
{
      if(playersturn.equalsIgnoreCase("X"))
{
      playersturn = "O";
}
      else
{
     playersturn = "X";
}
}
  
    private void reversePlayersTurn()
{
      if(playersturn.equalsIgnoreCase("O"))
{
      playersturn = "X";
}
      else
{
     playersturn = "O";
}
}
  
 public static String winnerName;
String jbutton1 ;
String jbutton2 ;
String jbutton3 ;
String jbutton4 ;
String jbutton5 ;
String jbutton6 ;
String jbutton7 ;
String jbutton8 ;
String jbutton9 ;
 
 private void winner()
{
getPlayerName();

if(jbutton1=="X" && jbutton2 == "X" && jbutton3 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
    
}
else if(jbutton4=="X" && jbutton5 == "X" && jbutton6 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
//resetgame();
}
else if(jbutton7=="X" && jbutton8 == "X" && jbutton9 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton1 == "X" && jbutton5 == "X" && jbutton9 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton2=="X" && jbutton5 == "X" && jbutton8 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton3=="X" && jbutton6 == "X" && jbutton9 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton1=="X" && jbutton4 == "X" && jbutton7 == "X")
{
    System.out.println("Case 1 ");
    winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton3=="X" && jbutton5 == "X" && jbutton7== "X")
{
    System.out.println("Case 9 ");
winnerName = playerName;
    System.out.println("Winner Name is " + winnerName);
playerXwins();
//resetgame();

} 
//WIN PLAYER O
else if(jbutton1=="O" && jbutton2 == "O" && jbutton3 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton4=="O" && jbutton5 == "O" && jbutton6 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton7=="O" && jbutton8 == "O" && jbutton9 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton1 == "O" && jbutton5 == "O" && jbutton9 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton2=="O" && jbutton5 == "O" && jbutton8 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton3=="O" && jbutton6 == "O" && jbutton9 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();
}
else if(jbutton1=="O" && jbutton4 == "O" && jbutton7 == "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
playerXwins();
// resetgame();

}
else if(jbutton3=="O" && jbutton5 == "O" && jbutton7== "O")
{
    System.out.println("Case O1 ");
winnerName = "The AI ";
    System.out.println("Winner Name is " + winnerName);
    playerXwins();
   // resetgame();
   
}

}

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayingWithComputerBeforeDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayingWithComputerBeforeDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayingWithComputerBeforeDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayingWithComputerBeforeDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayingWithComputerBeforeDesign().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JButton Button7;
    private javax.swing.JButton Button8;
    private javax.swing.JButton Button9;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField PlayerNameText;
    private javax.swing.JButton RecordingButton;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
public static void centreWindow(Window frame) {
    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
    frame.setLocation(x, y);
}

    private void showAllButtons() {
        Button1.setEnabled(true);
        Button2.setEnabled(true);
        Button3.setEnabled(true);
        Button4.setEnabled(true);
        Button5.setEnabled(true);
        Button6.setEnabled(true);
        Button7.setEnabled(true);
        Button8.setEnabled(true);
        Button9.setEnabled(true);
    }

    private void checkButtonStatus(int df) {
        if (Button1.isEnabled() && df == 1){
            Button1.setText(playersturn);
            Button1.setEnabled(false);
            recordSteps(1);
            playersturn();
            buttonList.remove(new Integer(1));
            
        }else if (Button2.isEnabled() && df == 2){
            Button2.setText(playersturn);
            Button2.setEnabled(false);
            recordSteps(2);
            playersturn();
            buttonList.remove(new Integer(2));
        }else if (Button3.isEnabled() && df == 3){
            Button3.setText(playersturn);
            Button3.setEnabled(false);
            recordSteps(3);
            playersturn();
            buttonList.remove(new Integer(3));
        }else if (Button4.isEnabled() && df == 4){
            Button4.setText(playersturn);
            Button4.setEnabled(false);
            recordSteps(4);
            playersturn();
            buttonList.remove(new Integer(4));
        }else if (Button5.isEnabled() && df == 5){
            Button5.setText(playersturn);
            Button5.setEnabled(false);
            recordSteps(5);
            playersturn();
            buttonList.remove(new Integer(5));
        }else if (Button6.isEnabled() && df == 6){
            Button6.setText(playersturn);
            Button6.setEnabled(false);
            recordSteps(6);
            playersturn();
            buttonList.remove(new Integer(6));
        }else if (Button7.isEnabled() && df == 7){
            Button7.setText(playersturn);
            Button7.setEnabled(false);
            recordSteps(7);
            playersturn();
            buttonList.remove(new Integer(7));
        }else if (Button8.isEnabled() && df == 8){
            Button8.setText(playersturn);
            Button8.setEnabled(false);
            recordSteps(8);
            playersturn();
            buttonList.remove(new Integer(8));
        }else if (Button9.isEnabled() && df == 9){
            Button9.setText(playersturn);
            Button9.setEnabled(false);
            recordSteps(9);
            playersturn();
            buttonList.remove(new Integer(9));
        }
    }

    private void checkRandomStatus(int randomNumber) {
        if (randomNumber == 1 && !Button1.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 2 && !Button2.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 3 && !Button3.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 4 && !Button4.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 5 && !Button5.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 6 && !Button6.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 7 && !Button7.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 8 && !Button8.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }else if (randomNumber == 9 && !Button9.isEnabled()) {
            randomNumber = randomX.nextInt(9) + 1;
        }
    }

    private void arrayListCount() {
        buttonList.clear();
        for (int x = 1 ; x < 10;x++){
            buttonList.add(x);}
        System.out.println("Array " + buttonList);
    }
    
    private void getRandomFromList() {
        int index = 0;
        for (int i = 0; i < buttonList.size(); i++) 
        {
             index = (int)(Math.random() * buttonList.size());
        }
        if(buttonList.size() ==0){
            System.out.println("Winner");
        }else{
        randomNumber = buttonList.get(index);}
        System.out.println("Random Element is :"
                               + randomNumber);
    }

    private void getPlayerName() {
       if(PlayerNameText.getText().isEmpty()){
    playerName = "Player One";
}else{
    playerName = PlayerNameText.getText();
}
    }

    private void recordSteps(int buttonNumber) {
        System.out.println("Turn Record : " + playersturn);
        System.out.println("Button Number ? " + buttonNumber);
       // reversePlayersTurn();
        if(record ==1 ){
        switch(buttonNumber){
                case 1:
                arrayButtonNumberRecording.add(1);
                arrayButtonXorORecording.add(playersturn);
                    System.out.println("Array Size In : " + arrayButtonNumberRecording.size());
                    break;
                case 2:
                arrayButtonNumberRecording.add(2);
                arrayButtonXorORecording.add(playersturn);
                    System.out.println("Array Size In 2 : " + arrayButtonNumberRecording.size());
                    break;
                case 3:
                arrayButtonNumberRecording.add(3);
                arrayButtonXorORecording.add(playersturn);
                break;
                case 4:
                arrayButtonNumberRecording.add(4);
                arrayButtonXorORecording.add(playersturn);
                break;
                case 5:
                arrayButtonNumberRecording.add(5);
                arrayButtonXorORecording.add(playersturn);
                break;
                case 6:
                arrayButtonNumberRecording.add(6);
                arrayButtonXorORecording.add(playersturn);
                break;
                case 7:
                arrayButtonNumberRecording.add(7);
                arrayButtonXorORecording.add(playersturn);
                break;
                case 8:
                arrayButtonNumberRecording.add(8);
                arrayButtonXorORecording.add(playersturn);
                break;
                case 9:
                arrayButtonNumberRecording.add(9);
                arrayButtonXorORecording.add(playersturn);
                break;
                default: System.out.println("Nothing");
        }
        }else{
            System.out.println("No Recording");
        }
    }

    String path ; 
    private void saveRecordingFile() {
        path = "D:\\XORecordings\\XOGameRecord.txt";
        try {  
      File myObj = new File(path);
      if (myObj.createNewFile()) {  
        System.out.println("File created: " + myObj.getName());  
      } else {  
        System.out.println("File already exists.");  
      }  
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();  
    }
       try {
      FileWriter myWriter = new FileWriter(path);
      for( int r =0; r < arrayButtonNumberRecording.size() ; r++){
            myWriter.write("Step Number " + (r+1) +
                    " : Button Number " + arrayButtonNumberRecording.get(r) + 
                    " With Sign " + arrayButtonXorORecording.get(r) + System.lineSeparator() );
        }
      myWriter.close();
      System.out.println("Successfully wrote to the file.");
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
        
    }

    private void addIconToButton(int i) {
        
    }
}
